{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/new-password/new-password.component.ts","./src/app/auth/new-password/new-password.component.html","./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/reset-password/reset-password.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAAmF;AAC1C;AACc;AAEE;AACG;AACsB;AACL;;;AAE7E,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,wEAAe,EAAE;IAC9C,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,8FAAqB,EAAE;IAC3D,EAAE,IAAI,EAAE,qBAAqB,EAAE,SAAS,EAAE,yFAAoB,EAAE;CACjE,CAAC;AAMK,MAAM,iBAAiB;;gGAAjB,iBAAiB;4JAAjB,iBAAiB,kBAHnB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9B,4DAAY;mIAEX,iBAAiB,uFAFlB,4DAAY;6FAEX,iBAAiB;cAJ7B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACA;AACF;AAEe;AACH;AACyB;AACL;AAEV;AACT;;AAiBnD,MAAM,UAAU;;yFAAV,UAAU;8IAAV,UAAU,kBARZ;YACP,4DAAY;YACZ,8EAAqB;YACrB,4DAAY;YACZ,0DAAW;YACX,sEAAiB;SAClB;mIAEU,UAAU,mBAbnB,wEAAe;QACf,qEAAc;QACd,8FAAqB;QACrB,yFAAoB,aAGpB,4DAAY;QACZ,8EAAqB;QACrB,4DAAY;QACZ,0DAAW;QACX,sEAAiB;6FAGR,UAAU;cAftB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,wEAAe;oBACf,qEAAc;oBACd,8FAAqB;oBACrB,yFAAoB;iBACrB;gBACD,OAAO,EAAE;oBACP,4DAAY;oBACZ,8EAAqB;oBACrB,4DAAY;oBACZ,0DAAW;oBACX,sEAAiB;iBAClB;aACF;;;;;;;;;;;;;;AC3BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;;;;;;;;;;;;ICEzD,yEAA6C;;;IAazC,4EACG;IAAA,qFAA0B;IAAA,4DAC5B;;;IAaD,4EACG;IAAA,wFAA6B;IAAA,4DAC/B;;;IAGH,6EAOE;IAAA,kEACF;IAAA,4DAAS;;;;IAHP,kFAA8B;;;;IArClC,6EACE;IADI,mYAA6B;IACjC,iFACE;IAAA,yEAUA;IAAA,6HACG;IAEL,4DAAiB;IAEjB,iFACE;IAAA,0EASA;IAAA,6HACG;IAEL,4DAAiB;IAEjB,0HAOE;IAEF,+EACE;IAAA,qEAAG;IAAA,qFAAyB;IAAA,yEAA6B;IAAA,mEAAO;IAAA,4DAAI;IAAA,4DAAI;IAC1E,4DAAU;IACZ,4DAAO;;;;;IAhCQ,0DAA0B;IAA1B,8EAA0B;IAe1B,0DAA6B;IAA7B,8EAA6B;IASxC,0DAAkB;IAAlB,oFAAkB;;AD7BnB,MAAM,cAAc;IAIzB,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAH3C,cAAS,GAAG,KAAK,CAAC;IAG4B,CAAC;IAE/C,QAAQ;QACN,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW;aAClC,qBAAqB,EAAE;aACvB,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,WAAW,CAAC,KAAK,CACpB,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,EACnB,IAAI,CACL,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;;4EA7BU,cAAc;8FAAd,cAAc;QCV3B,yEACE;QAAA,2EACE;QAAA,0HAA+B;QAC/B,6GACE;QA4CF,gEACA;QAAA,6EACE;QAAA,uEAAoC;QAAA,2EAAgB;QAAA,4DAAI;QAC1D,4DAAU;QACZ,4DAAW;QACb,4DAAM;;QAnDW,0DAAiB;QAAjB,+EAAiB;QAC0B,0DAAkB;QAAlB,gFAAkB;;6FDOjE,cAAc;cAJ1B,uDAAS;eAAC;gBACT,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;;;;;;;;;;;;ICEzD,yEAA6C;;;IAgBzC,4EACG;IAAA,wFAA6B;IAAA,4DAC/B;;;IAaD,4EACG;IAAA,wFAA6B;IAAA,4DAC/B;;;IAGH,6EAOE;IAAA,4EACF;IAAA,4DAAS;;;;IAHP,kFAAoC;;;;IAxCxC,6EAKE;IAJA,0YAAoC;IAIpC,iFACE;IAAA,yEASA;IAAA,mIACG;IAEL,4DAAiB;IAEjB,iFACE;IAAA,yEASA;IAAA,mIACG;IAEL,4DAAiB;IAEjB,+HAOE;IAEJ,4DAAO;;;;IA7BQ,0DAA6B;IAA7B,8EAA6B;IAe7B,0DAA6B;IAA7B,8EAA6B;IASxC,0DAAkB;IAAlB,oFAAkB;;AD/BnB,MAAM,oBAAoB;IAQ/B,YACS,WAAwB,EACxB,KAAqB,EACpB,MAAc;QAFf,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACpB,WAAM,GAAN,MAAM,CAAQ;QAVxB,cAAS,GAAG,KAAK,CAAC;IAWf,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEzD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW;aAClC,qBAAqB,EAAE;aACvB,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QACD,yBAAyB;QACzB,IAAI,CAAC,WAAW,CAAC,WAAW,CAC1B,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,CAAC,QAAQ,EACnB,IAAI,CAAC,KAAK,CAAC,eAAe,CAC3B,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;;wFAtCU,oBAAoB;oGAApB,oBAAoB;QCXjC,yEACE;QAAA,2EACE;QAAA,gIAA+B;QAC/B,mHAKE;QAwCJ,4DAAW;QACb,4DAAM;;QA/CW,0DAAiB;QAAjB,+EAAiB;QAI5B,0DAAkB;QAAlB,gFAAkB;;6FDKX,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;;;;;;;ICEtC,yEAA6C;;;IAiBzC,4EACG;IAAA,qFAA0B;IAAA,4DAC5B;;;IAGH,4EAOE;IAAA,2EACF;IAAA,4DAAS;;;;IAHP,kFAAsC;;;;IA1B1C,6EAKE;IAJA,0YAAqC;IAIrC,iFACE;IAAA,yEAUA;IAAA,oIACG;IAEL,4DAAiB;IAEjB,8HAOE;IAEJ,4DAAO;;;;IAdQ,0DAA0B;IAA1B,8EAA0B;IASrC,0DAAkB;IAAlB,oFAAkB;;ADlBnB,MAAM,qBAAqB;IAGhC,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAF3C,cAAS,GAAG,KAAK,CAAC;IAE4B,CAAC;IAE/C,OAAO,CAAC,IAAY;QAClB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QACD,yBAAyB;QACzB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;;0FAXU,qBAAqB;qGAArB,qBAAqB;QCVlC,yEACE;QAAA,2EACE;QAAA,iIAA+B;QAC/B,mHAKE;QA0BJ,4DAAW;QACb,4DAAM;;QAjCW,0DAAiB;QAAjB,+EAAiB;QAI5B,0DAAkB;QAAlB,gFAAkB;;6FDIX,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;;;;;;;;;;;;ICEzD,yEAA6C;;;IAgBzC,4EAAqC;IAAA,iFAAsB;IAAA,4DAAY;;;IAcvE,4EACG;IAAA,qFAA0B;IAAA,4DAC5B;;;IAaD,4EACG;IAAA,wFAA6B;IAAA,4DAC/B;;;IAaD,4EACG;IAAA,wFAA6B;IAAA,4DAC/B;;;IAGH,6EAOE;IAAA,oEACF;IAAA,4DAAS;;;;IAHP,kFAA+B;;;;IArEnC,6EAKE;IAJA,qYAA+B;IAI/B,iFACE;IAAA,yEASA;IAAA,8HAAqC;IACvC,4DAAiB;IAEjB,iFACE;IAAA,yEAUA;IAAA,8HACG;IAEL,4DAAiB;IAEjB,kFACE;IAAA,2EASA;IAAA,gIACG;IAEL,4DAAiB;IAEjB,kFACE;IAAA,4EASA;IAAA,gIACG;IAEL,4DAAiB;IAEjB,2HAOE;IAEF,+EACE;IAAA,qEAAG;IAAA,4EAAgB;IAAA,yEAA4B;IAAA,iEAAK;IAAA,4DAAI;IAAA,4DAAI;IAC9D,4DAAU;IACZ,4DAAO;;;;;;;IA7DQ,0DAAyB;IAAzB,8EAAyB;IAczB,0DAA0B;IAA1B,8EAA0B;IAe1B,0DAA6B;IAA7B,8EAA6B;IAe7B,0DAAoC;IAApC,8EAAoC;IAS/C,0DAAkB;IAAlB,oFAAkB;;AD7DnB,MAAM,eAAe;IAI1B,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAH3C,cAAS,GAAG,KAAK,CAAC;IAG4B,CAAC;IAE/C,QAAQ;QACN,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW;aAClC,qBAAqB,EAAE;aACvB,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,WAAW,CAAC,UAAU,CACzB,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,EACnB,IAAI,CAAC,KAAK,CAAC,eAAe,CAC3B,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;;8EA7BU,eAAe;+FAAf,eAAe;QCV5B,yEACE;QAAA,2EACE;QAAA,2HAA+B;QAC/B,8GAKE;QAwEJ,4DAAW;QACb,4DAAM;;QA/EW,0DAAiB;QAAjB,+EAAiB;QAI5B,0DAAkB;QAAlB,gFAAkB;;6FDIX,eAAe;cAJ3B,uDAAS;eAAC;gBACT,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC","file":"auth-auth-module-es2015.js","sourcesContent":["// this is called lazy loading, when we dont really need to load everything upfront\r\nimport { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\nimport { ResetPsswordComponent } from \"./reset-password/reset-password.component\";\r\nimport { NewPasswordComponent } from \"./new-password/new-password.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"login\", component: LoginComponent },\r\n  { path: \"signup\", component: SignupComponent },\r\n  { path: \"resetPassword\", component: ResetPsswordComponent },\r\n  { path: \"newPassword/:userId\", component: NewPasswordComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { ResetPsswordComponent } from \"./reset-password/reset-password.component\";\r\nimport { NewPasswordComponent } from \"./new-password/new-password.component\";\r\n\r\nimport { AngularMaterialModule } from \"../angular-material.module\";\r\nimport { AuthRoutingModule } from \"./auth-routing.module\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SignupComponent,\r\n    LoginComponent,\r\n    ResetPsswordComponent,\r\n    NewPasswordComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    AuthRoutingModule,\r\n  ],\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"],\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  onLogin(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.login(\r\n      form.value.name,\r\n      form.value.email,\r\n      form.value.password,\r\n      null\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"email\"\r\n          ngModel\r\n          #emailInput=\"ngModel\"\r\n          type=\"email\"\r\n          placeholder=\"E-Mail\"\r\n          required\r\n          email\r\n        />\r\n        <mat-error *ngIf=\"emailInput.invalid\"\r\n          >Please enter a valid email</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"password\"\r\n          ngModel\r\n          #passwordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"loginForm.invalid\"\r\n      >\r\n        Login\r\n      </button>\r\n      <section class=\"sign-up\">\r\n        <p>Doesn't have an account? <a routerLink=\"/auth/signup\">Sign Up</a></p>\r\n      </section>\r\n    </form>\r\n    <br />\r\n    <section class=\"reset-password\">\r\n      <a routerLink=\"/auth/resetPassword\">Forgot Password?</a>\r\n    </section>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { AuthService } from \"../auth.service\";\r\nimport { ActivatedRoute, Router, ParamMap } from \"@angular/router\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-new-password\",\r\n  templateUrl: \"./new-password.component.html\",\r\n  styleUrls: [\"./new-password.component.css\"],\r\n})\r\nexport class NewPasswordComponent implements OnInit, OnDestroy {\r\n  isLoading = false;\r\n  userId: string;\r\n\r\n  // userIsAuthenticated = false;\r\n  // userId: string;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(\r\n    public authService: AuthService,\r\n    public route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.userId = this.route.snapshot.paramMap.get(\"userId\");\r\n\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  onUpdate(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    // this.isLoading = true;\r\n    this.authService.newPassword(\r\n      this.userId,\r\n      form.value.password,\r\n      form.value.confirmPassword\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form\r\n      (submit)=\"onUpdate(newPasswordForm)\"\r\n      #newPasswordForm=\"ngForm\"\r\n      *ngIf=\"!isLoading\"\r\n    >\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"password\"\r\n          ngModel\r\n          #passwordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"confirmPassword\"\r\n          ngModel\r\n          #confirmPasswordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Confirm Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"newPasswordForm.invalid\"\r\n      >\r\n        Update Password\r\n      </button>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-reset-password\",\r\n  templateUrl: \"./reset-password.component.html\",\r\n  styleUrls: [\"./reset-password.component.css\"],\r\n})\r\nexport class ResetPsswordComponent {\r\n  isLoading = false;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  onReset(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    // this.isLoading = true;\r\n    this.authService.resetPassword(form.value.email);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form\r\n      (submit)=\"onReset(resetPasswordForm)\"\r\n      #resetPasswordForm=\"ngForm\"\r\n      *ngIf=\"!isLoading\"\r\n    >\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"email\"\r\n          ngModel\r\n          #emailInput=\"ngModel\"\r\n          type=\"email\"\r\n          placeholder=\"E-Mail\"\r\n          required\r\n          email\r\n        />\r\n        <mat-error *ngIf=\"emailInput.invalid\"\r\n          >Please enter a valid email</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"resetPasswordForm.invalid\"\r\n      >\r\n        Reset password\r\n      </button>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n  templateUrl: \"./signup.component.html\",\r\n  styleUrls: [\"./signup.component.css\"],\r\n})\r\nexport class SignupComponent implements OnInit, OnDestroy {\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  onSignup(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.createUser(\r\n      form.value.name,\r\n      form.value.email,\r\n      form.value.password,\r\n      form.value.confirmPassword\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form\r\n      (submit)=\"onSignup(signupForm)\"\r\n      #signupForm=\"ngForm\"\r\n      *ngIf=\"!isLoading\"\r\n    >\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"name\"\r\n          ngModel\r\n          #nameInput=\"ngModel\"\r\n          type=\"text\"\r\n          placeholder=\"Full name\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"nameInput.invalid\">Please enter your name</mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"email\"\r\n          ngModel\r\n          #emailInput=\"ngModel\"\r\n          type=\"email\"\r\n          placeholder=\"E-Mail\"\r\n          required\r\n          email\r\n        />\r\n        <mat-error *ngIf=\"emailInput.invalid\"\r\n          >Please enter a valid email</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"password\"\r\n          ngModel\r\n          #passwordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"confirmPassword\"\r\n          ngModel\r\n          #confirmPasswordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Confirm Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"confirmPasswordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"signupForm.invalid\"\r\n      >\r\n        Sign Up\r\n      </button>\r\n      <section class=\"login\">\r\n        <p>Already a user? <a routerLink=\"/auth/login\">Login</a></p>\r\n      </section>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}