{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/error-interceptor.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/footer/footer.component.ts","webpack:///src/app/footer/footer.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/not-found/not-found.component.ts","webpack:///src/app/not-found/not-found.component.html","webpack:///src/app/posts/post-create/mime-type.validator.ts","webpack:///src/app/posts/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create.component.html","webpack:///src/app/posts/post-details/post-details.component.ts","webpack:///src/app/posts/post-details/post-details.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/posts/post.service.ts","webpack:///src/app/posts/posts.module.ts","webpack:///src/app/search/search.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AngularMaterialModule","routes","path","component","canActivate","loadChildren","AuthModule","AppRoutingModule","forRoot","imports","providers","AppComponent","authService","autoAuthUser","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","bootstrap","entryComponents","AuthInterceptor","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthGuard","router","route","state","isAuth","getIsAuth","navigate","BACKEND_URL","apiUrl","AuthService","http","isAuthenticated","authStatusListener","token","userId","asObservable","name","email","password","confirmPassword","authData","post","subscribe","error","response","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","data","authInformation","getAuthData","clearTimeout","tokenTimer","clearAuthData","duration","setTimeout","logout","expiration","localStorage","setItem","toISOString","removeItem","getItem","providedIn","ErrorInterceptor","dialog","pipe","errorMessage","message","open","ErrorComponent","FooterComponent","HeaderComponent","userIsAuthenticated","authListenerSubs","getAuthStatusListener","unsubscribe","NotFoundComponent","mimeType","control","value","file","fileReader","FileReader","frObs","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","PostCreateComponent","postsService","mode","isLoading","authStatusSub","authStatus","form","title","validators","required","minLength","content","price","image","asyncValidators","paramMap","has","postId","get","getPost","postData","singlePost","_id","imagePath","creatorId","creatorName","date","setValue","invalid","addPost","updatePost","reset","event","target","files","patchValue","updateValueAndValidity","reader","onload","imagePreview","readAsDataURL","PostDetailsComponent","getUserId","favPostsSub","getFavoriteChangedListener","isFav","isFavorite","console","log","deletePost","addToFavorite","PostListComponent","posts","favToolTip","totalPosts","postsPerPage","currentPage","pageSizeOptions","getPosts","postsSub","getPostUpdateListener","postCount","pageData","pageIndex","pageSize","PostService","postsUpdated","favoriteChanged","queryParams","map","creator","createdAt","toLocaleDateString","maxPosts","transformedPostData","FormData","append","responseData","patch","put","PostsModule","SearchComponent","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MatExpansionModule } from \"@angular/material/expansion\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatTabsModule } from \"@angular/material/tabs\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { MatDividerModule } from \"@angular/material/divider\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatProgressSpinnerModule,\r\n    MatPaginatorModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatRadioModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n  ],\r\n})\r\nexport class AngularMaterialModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { AuthGuard } from \"./auth/auth.guard\";\r\nimport { AuthModule } from \"./auth/auth.module\";\r\n\r\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\r\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\r\nimport { PostDetailsComponent } from \"./posts/post-details/post-details.component\";\r\nimport { NotFoundComponent } from \"./not-found/not-found.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", component: PostListComponent },\r\n  { path: \"create\", component: PostCreateComponent, canActivate: [AuthGuard] },\r\n  {\r\n    path: \"edit/:postId\",\r\n    component: PostCreateComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: \"post-details/:postId\",\r\n    component: PostDetailsComponent,\r\n  },\r\n  {\r\n    path: \"favorites\",\r\n    component: PostListComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: \"auth\",\r\n    loadChildren: () =>\r\n      import(\"./auth/auth.module\").then((module) => module.AuthModule),\r\n  },\r\n  {\r\n    path: \"**\",\r\n    component: NotFoundComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n  providers: [AuthGuard],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\n\nimport { AuthService } from \"./auth/auth.service\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.autoAuthUser();\n  }\n}\n","<app-header></app-header>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { AngularMaterialModule } from \"./angular-material.module\";\nimport { PostsModule } from \"./posts/posts.module\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppRoutingModule } from \"./app-routing.module\";\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { AppComponent } from \"./app.component\";\nimport { HeaderComponent } from \"./header/header.component\";\nimport { ErrorComponent } from \"./error/error.component\";\n\nimport { AuthInterceptor } from \"./auth/auth-interceptor\";\nimport { ErrorInterceptor } from \"./error-interceptor\";\nimport { NotFoundComponent } from \"./not-found/not-found.component\";\nimport { FormsModule } from \"@angular/forms\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    ErrorComponent,\n    NotFoundComponent,\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    AngularMaterialModule,\n    PostsModule,\n    FormsModule,\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [ErrorComponent],\n})\nexport class AppModule {}\n","import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n} from \"@angular/common/http\";\r\n\r\nimport { AuthService } from \"./auth.service\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const authToken = this.authService.getToken();\r\n    // overriding the authorization header in my request and cloning the updated req to authRequest\r\n    const authRequest = req.clone({\r\n      headers: req.headers.set(\"Authorization\", \"Bearer \" + authToken),\r\n    });\r\n    return next.handle(authRequest);\r\n  }\r\n}\r\n","import { CanActivate, Router } from \"@angular/router\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(public authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(\r\n    route: import(\"@angular/router\").ActivatedRouteSnapshot,\r\n    state: import(\"@angular/router\").RouterStateSnapshot\r\n  ):\r\n    | boolean\r\n    | import(\"@angular/router\").UrlTree\r\n    | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree>\r\n    | Promise<boolean | import(\"@angular/router\").UrlTree> {\r\n    const isAuth = this.authService.getIsAuth();\r\n    if (!isAuth) {\r\n      this.router.navigate([\"/login\"]);\r\n    }\r\n    return isAuth;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { Subject } from \"rxjs\";\r\n\r\nimport { AuthData } from \"./auth-data.model\";\r\nimport { environment } from \"../../environments/environment\";\r\n\r\nconst BACKEND_URL = environment.apiUrl + \"/users/\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  private token: string;\r\n  private isAuthenticated = false;\r\n  private userId: string;\r\n\r\n  private authStatusListener = new Subject<boolean>();\r\n  private tokenTimer: any;\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n\r\n  getUserId() {\r\n    return this.userId;\r\n  }\r\n\r\n  getIsAuth() {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  getAuthStatusListener() {\r\n    return this.authStatusListener.asObservable();\r\n  }\r\n\r\n  createUser(name: string, email: string, password: string, confirmPassword) {\r\n    const authData: AuthData = {\r\n      name: name,\r\n      email: email,\r\n      password: password,\r\n      confirmPassword: confirmPassword,\r\n    };\r\n    this.http.post(BACKEND_URL + \"/signup\", authData).subscribe(\r\n      () => {\r\n        this.router.navigate([\"/auth/login\"]);\r\n      },\r\n      (error) => {\r\n        this.authStatusListener.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  login(name: string, email: string, password: string, confirmPassword) {\r\n    const authData: AuthData = {\r\n      name: name,\r\n      email: email,\r\n      password: password,\r\n      confirmPassword: confirmPassword,\r\n    };\r\n    this.http\r\n      .post<{ token: string; expiresIn: number; userId: string }>(\r\n        BACKEND_URL + \"/login\",\r\n        authData\r\n      )\r\n      .subscribe(\r\n        (response) => {\r\n          const token = response.token;\r\n          this.token = token;\r\n          if (token) {\r\n            const expiresInDuration = response.expiresIn;\r\n            this.setAuthTimer(expiresInDuration);\r\n            this.userId = response.userId;\r\n            this.isAuthenticated = true;\r\n            this.authStatusListener.next(true);\r\n            const now = new Date();\r\n            const expirationDate = new Date(\r\n              now.getTime() + expiresInDuration * 1000\r\n            );\r\n            this.saveAuthData(token, expirationDate, this.userId);\r\n            this.router.navigate([\"/\"]);\r\n          }\r\n        },\r\n        (error) => {\r\n          this.authStatusListener.next(false);\r\n        }\r\n      );\r\n  }\r\n\r\n  resetPassword(email: string) {\r\n    const data = {\r\n      email: email,\r\n    };\r\n    this.http\r\n      .post<{ status: string }>(BACKEND_URL + \"/resetPassword\", data)\r\n      .subscribe((response) => {\r\n        this.router.navigate([\"/\"]);\r\n      });\r\n  }\r\n\r\n  newPassword(userId: string, password: string, confirmPassword: string) {\r\n    const data = {\r\n      userId: userId,\r\n      password: password,\r\n      confirmPassword: confirmPassword,\r\n    };\r\n    this.http\r\n      .post<{ status: string }>(BACKEND_URL + \"/newPassword/\" + userId, data)\r\n      .subscribe(\r\n        (response) => {\r\n          this.router.navigate([\"/auth/login\"]);\r\n        },\r\n        (error) => {\r\n          this.authStatusListener.next(false);\r\n        }\r\n      );\r\n  }\r\n\r\n  autoAuthUser() {\r\n    const authInformation = this.getAuthData();\r\n    if (!authInformation) {\r\n      return;\r\n    }\r\n    const now = new Date();\r\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\r\n    if (expiresIn > 0) {\r\n      this.token = authInformation.token;\r\n      this.userId = authInformation.userId;\r\n      this.isAuthenticated = true;\r\n\r\n      this.setAuthTimer(expiresIn / 1000);\r\n      this.authStatusListener.next(true);\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.token = null;\r\n    this.isAuthenticated = false;\r\n    this.authStatusListener.next(false);\r\n    this.userId = null;\r\n    clearTimeout(this.tokenTimer);\r\n    this.clearAuthData();\r\n    this.router.navigate([\"/\"]);\r\n  }\r\n\r\n  private setAuthTimer(duration: number) {\r\n    this.tokenTimer = setTimeout(function () {\r\n      this.logout();\r\n    }, duration);\r\n  }\r\n\r\n  // storing our data on the local storage(managed by the browser). so reloading wont affect the token\r\n  private saveAuthData(token: string, expiration: Date, userId: string) {\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"expiration\", expiration.toISOString());\r\n    localStorage.setItem(\"userId\", userId);\r\n  }\r\n\r\n  // clearing the saved data on the local storage\r\n  private clearAuthData() {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expiration\");\r\n    localStorage.removeItem(\"userId\");\r\n  }\r\n\r\n  private getAuthData() {\r\n    const token = localStorage.getItem(\"token\");\r\n    const expirationDate = localStorage.getItem(\"expiration\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (!token || !expirationDate) {\r\n      return;\r\n    }\r\n    return {\r\n      token: token,\r\n      expirationDate: new Date(expirationDate),\r\n      userId: userId,\r\n    };\r\n  }\r\n}\r\n","import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\n\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { throwError } from \"rxjs\";\r\nimport { ErrorComponent } from \"./error/error.component\";\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  constructor(private dialog: MatDialog) {}\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    return next.handle(req).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        let errorMessage = \"An unkown error occured!!\";\r\n        if (error.error.message) {\r\n          errorMessage = error.error.message;\r\n        }\r\n        this.dialog.open(ErrorComponent, { data: { message: errorMessage } });\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Component, Inject } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  templateUrl: \"./error.component.html\"\r\n})\r\nexport class ErrorComponent {\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { message: string }) {}\r\n}\r\n","<h1 mat-card-title>An Error Occured!</h1>\r\n\r\n<div mat-dialog-content>\r\n  <p class=\"mat-body-1\">{{ data.message }}</p>\r\n</div>\r\n<div mat-mat-dialog-actions>\r\n  <button mat-button color=\"warn\" mat-dialog-close>Okay</button>\r\n</div>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"app-footer\",\r\n  templateUrl: \"./footer.component.html\",\r\n  styleUrls: [\"./footer.component.css\"],\r\n})\r\nexport class FooterComponent {}\r\n","<mat-toolbar>\r\n  <p class=\"footer\">Made with ❤️ by Hassan Abbas</p>\r\n</mat-toolbar>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\n\r\nimport { AuthService } from \"../auth/auth.service\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-header\",\r\n  templateUrl: \"./header.component.html\",\r\n  styleUrls: [\"./header.component.css\"]\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n  private authListenerSubs: Subscription;\r\n  userIsAuthenticated = false;\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authListenerSubs = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authListenerSubs.unsubscribe();\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n  <span><a routerLink=\"/\">Posts</a></span>\r\n  <span class=\"spacer\"></span>\r\n  <ul>\r\n    <li *ngIf=\"userIsAuthenticated\">\r\n      <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\"\r\n        >New Post</a\r\n      >\r\n    </li>\r\n\r\n    <li *ngIf=\"!userIsAuthenticated\">\r\n      <a mat-button routerLink=\"/auth/login\" routerLinkActive=\"mat-accent\"\r\n        >Login</a\r\n      >\r\n    </li>\r\n\r\n    <li *ngIf=\"!userIsAuthenticated\">\r\n      <a mat-button routerLink=\"/auth/signup\" routerLinkActive=\"mat-accent\"\r\n        >Signup</a\r\n      >\r\n    </li>\r\n\r\n    <li *ngIf=\"userIsAuthenticated\">\r\n      <button mat-button (click)=\"logout()\">Logout</button>\r\n    </li>\r\n  </ul>\r\n</mat-toolbar>\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"app-not-found\",\r\n  templateUrl: \"./not-found.component.html\",\r\n  styleUrls: [\"./not-found.component.css\"],\r\n})\r\nexport class NotFoundComponent {}\r\n","<img class=\"center\" src=\"./assets/notfound.jpg\" alt=\"404\" />\r\n\r\n<div class=\"home\">\r\n  <p>You might wanna go to the <a routerLink=\"/\">home</a> page</p>\r\n</div>\r\n","import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from \"rxjs\";\r\n\r\nexport const mimeType = (\r\n  control: AbstractControl\r\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\r\n  if (typeof control.value === \"string\") {\r\n    return of(null);\r\n  }\r\n  const file = control.value as File;\r\n  const fileReader = new FileReader();\r\n  const frObs = Observable.create(\r\n    (observer: Observer<{ [key: string]: any }>) => {\r\n      fileReader.addEventListener(\"loadend\", () => {\r\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(\r\n          0,\r\n          4\r\n        );\r\n        let header = \"\";\r\n        let isValid = false;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n          header += arr[i].toString(16);\r\n        }\r\n\r\n        switch (header) {\r\n          case \"89504e47\":\r\n            isValid = true;\r\n            break;\r\n          case \"ffd8ffe0\":\r\n          case \"ffd8ffe1\":\r\n          case \"ffd8ffe2\":\r\n          case \"ffd8ffe3\":\r\n          case \"ffd8ffe8\":\r\n            isValid = true;\r\n            break;\r\n          default:\r\n            isValid = false;\r\n            break;\r\n        }\r\n        if (isValid) {\r\n          observer.next(null);\r\n        } else {\r\n          observer.next({ invalidMimeType: true });\r\n        }\r\n        observer.complete();\r\n      });\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n\r\n  return frObs;\r\n};\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\r\n\r\nimport { PostService } from \"../post.service\";\r\nimport { Post } from \"../post.model\";\r\nimport { mimeType } from \"./mime-type.validator\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { AuthService } from \"src/app/auth/auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-post-create\",\r\n  templateUrl: \"./post-create.component.html\",\r\n  styleUrls: [\"./post-create.component.css\"],\r\n})\r\nexport class PostCreateComponent implements OnInit, OnDestroy {\r\n  private mode = \"create\";\r\n  private postId: string;\r\n  singlePost: Post;\r\n  isLoading = false;\r\n\r\n  private authStatusSub: Subscription;\r\n\r\n  form: FormGroup;\r\n  imagePreview: string;\r\n\r\n  constructor(\r\n    public postsService: PostService,\r\n    public route: ActivatedRoute,\r\n    public authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n    this.form = new FormGroup({\r\n      title: new FormControl(null, {\r\n        validators: [Validators.required, Validators.minLength(3)],\r\n      }),\r\n      content: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      price: new FormControl(null, {\r\n        validators: [Validators.required],\r\n      }),\r\n      image: new FormControl(null, {\r\n        validators: [Validators.required],\r\n        asyncValidators: [mimeType],\r\n      }),\r\n    });\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has(\"postId\")) {\r\n        this.mode = \"edit\";\r\n        this.postId = paramMap.get(\"postId\");\r\n        this.isLoading = true;\r\n        this.postsService.getPost(this.postId).subscribe((postData) => {\r\n          this.isLoading = false;\r\n          this.singlePost = {\r\n            id: postData._id,\r\n            title: postData.title,\r\n            content: postData.content,\r\n            price: postData.price,\r\n            imagePath: postData.imagePath,\r\n            creatorId: postData.creatorId,\r\n            creatorName: postData.creatorName,\r\n            date: postData.date,\r\n          };\r\n          this.form.setValue({\r\n            title: this.singlePost.title,\r\n            content: this.singlePost.content,\r\n            price: this.singlePost.price,\r\n            image: this.singlePost.imagePath,\r\n          });\r\n        });\r\n      } else {\r\n        this.mode = \"create\";\r\n        this.postId = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSavePost() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    if (this.mode === \"create\") {\r\n      // sending the title and content to the addPost method in post.service.ts\r\n      this.postsService.addPost(\r\n        this.form.value.title,\r\n        this.form.value.content,\r\n        this.form.value.price,\r\n        this.form.value.image\r\n      );\r\n    } else {\r\n      this.postsService.updatePost(\r\n        this.postId,\r\n        this.form.value.title,\r\n        this.form.value.content,\r\n        this.form.value.price,\r\n        this.form.value.image\r\n      );\r\n    }\r\n    this.form.reset();\r\n  }\r\n\r\n  onImagePicked(event) {\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n    this.form.patchValue({ image: file });\r\n    this.form.get(\"image\").updateValueAndValidity();\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.imagePreview = reader.result as string;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isLoading\">\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          type=\"text\"\r\n          formControlName=\"title\"\r\n          placeholder=\"Post title\"\r\n        />\r\n        <mat-error *ngIf=\"form.get('title').invalid\"\r\n          >Please enter a post title</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <div>\r\n        <button\r\n          mat-stroked-button\r\n          type=\"button\"\r\n          (click)=\"filePicker.click()\"\r\n          multiple\r\n        >\r\n          Pick an image\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          multiple\r\n          #filePicker\r\n          (change)=\"onImagePicked($event)\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        class=\"image-preview\"\r\n        *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\"\r\n      >\r\n        <img [src]=\"imagePreview\" [alt]=\"form.value.title\" />\r\n      </div>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          type=\"number\"\r\n          formControlName=\"price\"\r\n          placeholder=\"Price\"\r\n          step=\"1000\"\r\n        />\r\n        <mat-hint align=\"start\"><strong>Prices in LBP</strong> </mat-hint>\r\n        <mat-error *ngIf=\"form.get('price').invalid\"\r\n          >Please enter a price</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <textarea\r\n          matInput\r\n          formControlName=\"content\"\r\n          placeholder=\"Post content\"\r\n          rows=\"6\"\r\n          cols=\"30\"\r\n          wrap=\"hard\"\r\n        ></textarea>\r\n        <mat-error *ngIf=\"form.get('content').invalid\"\r\n          >Please enter a post content</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"form.invalid\"\r\n      >\r\n        Save post\r\n      </button>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { AuthService } from \"src/app/auth/auth.service\";\r\nimport { PostService } from \"../post.service\";\r\nimport { Router, ActivatedRoute, ParamMap } from \"@angular/router\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { Post } from \"../post.model\";\r\n\r\n@Component({\r\n  selector: \"app-post-details\",\r\n  templateUrl: \"./post-details.component.html\",\r\n  styleUrls: [\"./post-details.component.css\"],\r\n})\r\nexport class PostDetailsComponent implements OnInit, OnDestroy {\r\n  singlePost: Post;\r\n  private postId: string;\r\n\r\n  isLoading = false;\r\n  userIsAuthenticated = false;\r\n  userId: string;\r\n\r\n  isFavorite: boolean;\r\n\r\n  private authStatusSub: Subscription;\r\n  private favPostsSub: Subscription;\r\n\r\n  constructor(\r\n    public postsService: PostService,\r\n    public authService: AuthService,\r\n    public route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has(\"postId\")) {\r\n        this.postId = paramMap.get(\"postId\");\r\n        this.isLoading = true;\r\n        this.postsService.getPost(this.postId).subscribe((postData) => {\r\n          this.isLoading = false;\r\n          this.singlePost = {\r\n            id: postData._id,\r\n            title: postData.title,\r\n            content: postData.content,\r\n            price: postData.price,\r\n            imagePath: postData.imagePath,\r\n            creatorId: postData.creatorId,\r\n            creatorName: postData.creatorName,\r\n            date: postData.date,\r\n          };\r\n        });\r\n      }\r\n    });\r\n\r\n    this.userId = this.authService.getUserId();\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((isAuthenticated) => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.userId = this.authService.getUserId();\r\n      });\r\n\r\n    this.favPostsSub = this.postsService\r\n      .getFavoriteChangedListener()\r\n      .subscribe((isFav) => {\r\n        this.isFavorite = isFav;\r\n        console.log(this.isFavorite);\r\n      });\r\n  }\r\n\r\n  onDelete(postId: string) {\r\n    this.isLoading = true;\r\n    this.postsService.deletePost(postId).subscribe(\r\n      () => {\r\n        this.router.navigate([\"/\"]);\r\n      },\r\n      () => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  onFavorite(postId: string) {\r\n    if (this.isFavorite) {\r\n      this.isFavorite = false;\r\n    } else {\r\n      this.isFavorite = true;\r\n    }\r\n    this.postsService.addToFavorite(postId, this.isFavorite);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe;\r\n    this.favPostsSub.unsubscribe;\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n  <mat-card class=\"post-card\" *ngIf=\"!isLoading && singlePost\">\r\n    <mat-card-header>\r\n      <!-- <div mat-card-avatar class=\"post-header-image\"></div> -->\r\n      <mat-card-title>{{ singlePost.title }}</mat-card-title>\r\n      <mat-card-subtitle\r\n        >Posted by: {{ singlePost.creatorName }}\r\n      </mat-card-subtitle>\r\n      <mat-card-subtitle> {{ singlePost.date }} </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <div>\r\n      <img\r\n        class=\"post-image\"\r\n        mat-card-image\r\n        [src]=\"singlePost.imagePath\"\r\n        [alt]=\"singlePost.title\"\r\n      />\r\n    </div>\r\n    <mat-card-content>\r\n      <div>\r\n        <p class=\"post-price\">\r\n          Price:\r\n          {{ singlePost.price }} LBP\r\n        </p>\r\n        <hr />\r\n        <p class=\"post-content\">{{ singlePost.content }}</p>\r\n      </div>\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions\r\n      *ngIf=\"userIsAuthenticated && userId == singlePost.creatorId\"\r\n    >\r\n      <div class=\"post-btn\">\r\n        <a\r\n          mat-stroked-button\r\n          color=\"primary\"\r\n          [routerLink]=\"['/edit', singlePost.id]\"\r\n          >Edit</a\r\n        >\r\n        <button\r\n          mat-stroked-button\r\n          color=\"warn\"\r\n          (click)=\"onDelete(singlePost.id)\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { PageEvent } from \"@angular/material/paginator\";\r\n\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { Post } from \"../post.model\";\r\nimport { PostService } from \"../post.service\";\r\nimport { AuthService } from \"src/app/auth/auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-post-list\",\r\n  templateUrl: \"./post-list.component.html\",\r\n  styleUrls: [\"./post-list.component.css\"],\r\n})\r\nexport class PostListComponent implements OnInit, OnDestroy {\r\n  posts: Post[] = [];\r\n\r\n  private postsSub: Subscription;\r\n\r\n  isLoading = false;\r\n\r\n  isFavorite = false;\r\n  favToolTip = \"Add to favorites\";\r\n\r\n  // for pagination\r\n  totalPosts = 0;\r\n  postsPerPage = 4;\r\n  currentPage = 1;\r\n  pageSizeOptions = [2, 4, 6, 10];\r\n\r\n  constructor(\r\n    public postsService: PostService,\r\n    public authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isLoading = true;\r\n    this.postsService.getPosts(this.postsPerPage, this.currentPage);\r\n    this.postsSub = this.postsService\r\n      .getPostUpdateListener()\r\n      .subscribe((postData: { posts: Post[]; postCount: number }) => {\r\n        this.isLoading = false;\r\n        this.posts = postData.posts;\r\n        this.totalPosts = postData.postCount;\r\n      });\r\n  }\r\n\r\n  onChangedPage(pageData: PageEvent) {\r\n    this.isLoading = true;\r\n    this.currentPage = pageData.pageIndex + 1;\r\n    this.postsPerPage = pageData.pageSize;\r\n    this.postsService.getPosts(this.postsPerPage, this.currentPage);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe;\r\n  }\r\n}\r\n","<app-search></app-search>\r\n\r\n<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n<div class=\"container\" *ngIf=\"posts.length > 0 && !isLoading\">\r\n  <mat-card class=\"post-card\" *ngFor=\"let post of posts\">\r\n    <mat-card-header>\r\n      <mat-card-title class=\"card-title\">{{ post.title }}</mat-card-title>\r\n      <mat-card-subtitle class=\"card-subtitle\"\r\n        >Posted by: {{ post.creatorName }} <br />\r\n        {{ post.date }}\r\n      </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <img\r\n      class=\"post-image img\"\r\n      mat-card-image\r\n      [src]=\"post.imagePath\"\r\n      [alt]=\"post.title\"\r\n    />\r\n    <mat-card-content>\r\n      <!-- <p>\r\n          {{ post.content }}\r\n        </p> -->\r\n    </mat-card-content>\r\n    <mat-card-actions>\r\n      <div class=\"details-btn\">\r\n        <a mat-button color=\"primary\" [routerLink]=\"['/post-details', post.id]\">\r\n          More details\r\n        </a>\r\n      </div>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>\r\n\r\n<mat-paginator\r\n  [length]=\"totalPosts\"\r\n  [pageSize]=\"postsPerPage\"\r\n  [pageSizeOptions]=\"pageSizeOptions\"\r\n  (page)=\"onChangedPage($event)\"\r\n  *ngIf=\"posts.length > 0\"\r\n></mat-paginator>\r\n\r\n<p class=\"info-text mat-body-2\" *ngIf=\"posts.length <= 0 && !isLoading\">\r\n  No posts added yet!\r\n</p>\r\n\r\n<!-- <app-footer></app-footer> -->\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { Post } from \"./post.model\";\r\n\r\nimport { Subject } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport { environment } from \"../../environments/environment\";\r\n\r\nconst BACKEND_URL = environment.apiUrl + \"/posts/\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\n// handling all the posts services in a class and exporting it\r\nexport class PostService {\r\n  // creating an array of type Post (interface)\r\n  private posts: Post[] = [];\r\n  private postsUpdated = new Subject<{ posts: Post[]; postCount: number }>();\r\n\r\n  private isFav: boolean;\r\n  private favoriteChanged = new Subject<boolean>();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  // getting all the posts from the API\r\n  getPosts(postsPerPage: number, currentPage: number) {\r\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\r\n    this.http\r\n      .get<{ message: string; posts: any; maxPosts: number }>(\r\n        BACKEND_URL + queryParams\r\n      )\r\n      .pipe(\r\n        map((postData) => {\r\n          return {\r\n            posts: postData.posts.map((post) => {\r\n              return {\r\n                title: post.title,\r\n                content: post.content,\r\n                price: post.price,\r\n                id: post._id,\r\n                imagePath: post.imagePath,\r\n                creator: post.creator,\r\n                creatorName: post.creator.name,\r\n                date: new Date(post.createdAt).toLocaleDateString(\"en-US\"),\r\n              };\r\n            }),\r\n            maxPosts: postData.maxPosts,\r\n          };\r\n        })\r\n      )\r\n      // transformedposts is the returned value of the pipe.. we tranformed it to get the id\r\n      .subscribe((transformedPostData) => {\r\n        this.posts = transformedPostData.posts;\r\n        this.postsUpdated.next({\r\n          posts: [...this.posts],\r\n          postCount: transformedPostData.maxPosts,\r\n        });\r\n      });\r\n  }\r\n\r\n  getPostUpdateListener() {\r\n    return this.postsUpdated.asObservable();\r\n  }\r\n\r\n  getPost(id: string) {\r\n    /* this will return the observable we're getting from the httpClient\r\n    so we can subscribe in the component */\r\n    return this.http.get<{\r\n      _id: string;\r\n      title: string;\r\n      content: string;\r\n      price: number;\r\n      imagePath: string;\r\n      creatorId: string;\r\n      creatorName: string;\r\n      date: Date;\r\n    }>(BACKEND_URL + id);\r\n  }\r\n\r\n  addPost(title: string, content: string, price: any, image: File) {\r\n    const postData = new FormData();\r\n    postData.append(\"title\", title);\r\n    postData.append(\"content\", content);\r\n    postData.append(\"price\", price);\r\n    postData.append(\"image\", image, title);\r\n    // sending a POST request to app.js\r\n    this.http\r\n      .post<{ message: string; post: Post }>(BACKEND_URL, postData)\r\n      .subscribe((responseData) => {\r\n        this.router.navigate([\"/\"]);\r\n      });\r\n  }\r\n\r\n  deletePost(postId: string) {\r\n    // we are returning as an Observable and then we can subscribe in the post-list comp\r\n    return this.http.delete(BACKEND_URL + postId);\r\n  }\r\n\r\n  addToFavorite(postId: string, isFavorite: boolean) {\r\n    const data = {\r\n      isFavorite: isFavorite,\r\n    };\r\n    console.log(data);\r\n    this.http\r\n      .patch<{ message: string; isFav: boolean }>(BACKEND_URL + postId, data)\r\n      .subscribe(\r\n        (response) => {\r\n          this.isFav = response.isFav;\r\n          this.favoriteChanged.next(this.isFav);\r\n          this.router.navigate([`/post-details/${postId}`]);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }\r\n  getFavoriteChangedListener() {\r\n    return this.favoriteChanged.asObservable();\r\n  }\r\n\r\n  updatePost(\r\n    id: string,\r\n    title: string,\r\n    content: string,\r\n    price: any,\r\n    image: File | string\r\n  ) {\r\n    let postData: Post | FormData;\r\n    if (typeof image === \"object\") {\r\n      postData = new FormData();\r\n      postData.append(\"id\", id);\r\n      postData.append(\"title\", title);\r\n      postData.append(\"content\", content);\r\n      postData.append(\"price\", price);\r\n      postData.append(\"image\", image, title);\r\n    } else {\r\n      postData = {\r\n        id: id,\r\n        title: title,\r\n        content: content,\r\n        price: price,\r\n        imagePath: image,\r\n        creatorId: null,\r\n        creatorName: null,\r\n        date: null,\r\n      };\r\n    }\r\n    this.http.put(BACKEND_URL + id, postData).subscribe((response) => {\r\n      this.router.navigate([`/post-details/${id}`]);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { AngularMaterialModule } from \"../angular-material.module\";\r\n\r\nimport { PostListComponent } from \"./post-list/post-list.component\";\r\nimport { PostCreateComponent } from \"./post-create/post-create.component\";\r\nimport { PostDetailsComponent } from \"./post-details/post-details.component\";\r\nimport { FooterComponent } from \"../footer/footer.component\";\r\nimport { SearchComponent } from \"../search/search.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PostCreateComponent,\r\n    PostListComponent,\r\n    PostDetailsComponent,\r\n    FooterComponent,\r\n    SearchComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n  ],\r\n})\r\nexport class PostsModule {}\r\n","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"app-search\",\r\n  templateUrl: \"./search.component.html\",\r\n  styleUrls: [\"./search.component.css\"],\r\n})\r\nexport class SearchComponent {\r\n  onLogin(form: NgForm) {}\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://localhost:3000/api\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}