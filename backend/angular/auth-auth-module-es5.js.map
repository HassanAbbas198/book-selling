{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/new-password/new-password.component.ts","webpack:///src/app/auth/new-password/new-password.component.html","webpack:///src/app/auth/reset-password/reset-password.component.ts","webpack:///src/app/auth/reset-password/reset-password.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/signup/signup.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","authService","isLoading","authStatusSub","getAuthStatusListener","subscribe","authStatus","form","invalid","login","value","name","email","password","unsubscribe","templateUrl","styleUrls","NewPasswordComponent","route","router","userId","snapshot","paramMap","get","newPassword","confirmPassword","selector","ResetPsswordComponent","resetPassword","SignupComponent","createUser"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["// this is called lazy loading, when we dont really need to load everything upfront\r\nimport { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\nimport { ResetPsswordComponent } from \"./reset-password/reset-password.component\";\r\nimport { NewPasswordComponent } from \"./new-password/new-password.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"login\", component: LoginComponent },\r\n  { path: \"signup\", component: SignupComponent },\r\n  { path: \"resetPassword\", component: ResetPsswordComponent },\r\n  { path: \"newPassword/:userId\", component: NewPasswordComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { ResetPsswordComponent } from \"./reset-password/reset-password.component\";\r\nimport { NewPasswordComponent } from \"./new-password/new-password.component\";\r\n\r\nimport { AngularMaterialModule } from \"../angular-material.module\";\r\nimport { AuthRoutingModule } from \"./auth-routing.module\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SignupComponent,\r\n    LoginComponent,\r\n    ResetPsswordComponent,\r\n    NewPasswordComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    AuthRoutingModule,\r\n  ],\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"],\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  onLogin(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.login(\r\n      form.value.name,\r\n      form.value.email,\r\n      form.value.password,\r\n      null\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"email\"\r\n          ngModel\r\n          #emailInput=\"ngModel\"\r\n          type=\"email\"\r\n          placeholder=\"E-Mail\"\r\n          required\r\n          email\r\n        />\r\n        <mat-error *ngIf=\"emailInput.invalid\"\r\n          >Please enter a valid email</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"password\"\r\n          ngModel\r\n          #passwordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"loginForm.invalid\"\r\n      >\r\n        Login\r\n      </button>\r\n      <section class=\"sign-up\">\r\n        <p>Doesn't have an account? <a routerLink=\"/auth/signup\">Sign Up</a></p>\r\n      </section>\r\n    </form>\r\n    <br />\r\n    <section class=\"reset-password\">\r\n      <a routerLink=\"/auth/resetPassword\">Forgot Password?</a>\r\n    </section>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { AuthService } from \"../auth.service\";\r\nimport { ActivatedRoute, Router, ParamMap } from \"@angular/router\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-new-password\",\r\n  templateUrl: \"./new-password.component.html\",\r\n  styleUrls: [\"./new-password.component.css\"],\r\n})\r\nexport class NewPasswordComponent implements OnInit, OnDestroy {\r\n  isLoading = false;\r\n  userId: string;\r\n\r\n  // userIsAuthenticated = false;\r\n  // userId: string;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(\r\n    public authService: AuthService,\r\n    public route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.userId = this.route.snapshot.paramMap.get(\"userId\");\r\n\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  onUpdate(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    // this.isLoading = true;\r\n    this.authService.newPassword(\r\n      this.userId,\r\n      form.value.password,\r\n      form.value.confirmPassword\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form\r\n      (submit)=\"onUpdate(newPasswordForm)\"\r\n      #newPasswordForm=\"ngForm\"\r\n      *ngIf=\"!isLoading\"\r\n    >\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"password\"\r\n          ngModel\r\n          #passwordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"confirmPassword\"\r\n          ngModel\r\n          #confirmPasswordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Confirm Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"newPasswordForm.invalid\"\r\n      >\r\n        Update Password\r\n      </button>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-reset-password\",\r\n  templateUrl: \"./reset-password.component.html\",\r\n  styleUrls: [\"./reset-password.component.css\"],\r\n})\r\nexport class ResetPsswordComponent {\r\n  isLoading = false;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  onReset(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    // this.isLoading = true;\r\n    this.authService.resetPassword(form.value.email);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form\r\n      (submit)=\"onReset(resetPasswordForm)\"\r\n      #resetPasswordForm=\"ngForm\"\r\n      *ngIf=\"!isLoading\"\r\n    >\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"email\"\r\n          ngModel\r\n          #emailInput=\"ngModel\"\r\n          type=\"email\"\r\n          placeholder=\"E-Mail\"\r\n          required\r\n          email\r\n        />\r\n        <mat-error *ngIf=\"emailInput.invalid\"\r\n          >Please enter a valid email</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"resetPasswordForm.invalid\"\r\n      >\r\n        Reset password\r\n      </button>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\n\r\n@Component({\r\n  templateUrl: \"./signup.component.html\",\r\n  styleUrls: [\"./signup.component.css\"],\r\n})\r\nexport class SignupComponent implements OnInit, OnDestroy {\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe((authStatus) => {\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  onSignup(form: NgForm) {\r\n    if (form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.authService.createUser(\r\n      form.value.name,\r\n      form.value.email,\r\n      form.value.password,\r\n      form.value.confirmPassword\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form\r\n      (submit)=\"onSignup(signupForm)\"\r\n      #signupForm=\"ngForm\"\r\n      *ngIf=\"!isLoading\"\r\n    >\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"name\"\r\n          ngModel\r\n          #nameInput=\"ngModel\"\r\n          type=\"text\"\r\n          placeholder=\"Full name\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"nameInput.invalid\">Please enter your name</mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"email\"\r\n          ngModel\r\n          #emailInput=\"ngModel\"\r\n          type=\"email\"\r\n          placeholder=\"E-Mail\"\r\n          required\r\n          email\r\n        />\r\n        <mat-error *ngIf=\"emailInput.invalid\"\r\n          >Please enter a valid email</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"password\"\r\n          ngModel\r\n          #passwordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"passwordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          name=\"confirmPassword\"\r\n          ngModel\r\n          #confirmPasswordInput=\"ngModel\"\r\n          type=\"password\"\r\n          placeholder=\"Confirm Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"confirmPasswordInput.invalid\"\r\n          >Please enter a valid password</mat-error\r\n        >\r\n      </mat-form-field>\r\n\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        [disabled]=\"signupForm.invalid\"\r\n      >\r\n        Sign Up\r\n      </button>\r\n      <section class=\"login\">\r\n        <p>Already a user? <a routerLink=\"/auth/login\">Login</a></p>\r\n      </section>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n"]}